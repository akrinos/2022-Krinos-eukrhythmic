configfile: "config.yaml"

import os
import sys
import pandas as pd


## Add Salmon output for individual assemblers.
base_dir = "/vortexfs1/omics/alexander/akrinos/2021-testing-eukrhythmic/eukrhythmic_paper_narragansett" 
#eukrhythmic_paper_trials_September21"
output_dirs = [os.path.join(base_dir, curr, "eukrhythmic_assembly") for curr in os.listdir(base_dir) if ("jEUKebox" in curr)] # & \
              # ("CommB" not in curr) & ("Trial4" not in curr)]
DATAFILE = "/vortexfs1/omics/alexander/akrinos/2021-testing-eukrhythmic/eukrhythmic/input/sampledata_MMETSP_2.txt"
output_dirs = base_dir
DATAFILE = "/vortexfs1/omics/alexander/akrinos/2021-testing-eukrhythmic/eukrhythmic/input/NB_table.txt"
SAMPLEINFO = pd.read_csv(DATAFILE, sep = "\t")
assemblygroups = list(set(SAMPLEINFO.AssemblyGroup))

def salmon_get_samples(assembly,OUTPUTDIR,left_or_right,list_format):
    foldername = os.path.join("intermediate-files", "01-setup",\
                          "03-alignment-spike")
    extensionname = "clean"
    foldername = os.path.join("intermediate-files", "01-setup",\
                      "02-trim")
    extensionname = "trimmed"
    samplelist = list(SAMPLEINFO.loc[SAMPLEINFO['AssemblyGroup'] == assembly]['SampleID']) 
    if assembly == "merged":
        samplelist = list(SAMPLEINFO['SampleID'])

    if left_or_right == "left":
        filenames = [os.path.join(OUTPUTDIR, foldername, sample + "_1." + extensionname + ".fastq.gz") 
                      for sample in samplelist]
    else:
        filenames = [os.path.join(OUTPUTDIR, foldername, sample + "_2." + extensionname + ".fastq.gz") 
                      for sample in samplelist]
    if list_format:
        return filenames
    else:
        return " ".join(filenames)
                     
rule all:
    input:
        salmon_out = expand(os.path.join("{output_dir}", "intermediate-files", "04-compare",
                                         "xx-individual-mapping",\
                                         "salmon", "{assembly}_{assembler}_quant", "quant.sf"), 
                            output_dir = output_dirs,
                            assembly = assemblygroups,
                            assembler = list(config["assemblers"])),
        #salmon_td = expand(os.path.join("{output_dir}", "intermediate-files", "04-compare",
       #                                  "08b-CAG-transdecoder-mapping",\
       #                                  "salmon", "{assembly}_quant", "quant.sf"),
        #                    output_dir = output_dirs,
         #                   assembly = assemblygroups)

rule salmon_indiv:
    input: 
        fastafile = os.path.join("{output_dir}", "intermediate-files", "02-assembly",
                                 "05-assembly",\
                                 "{assembly}_{assembler}.fasta"),
        left = lambda filename: salmon_get_samples(filename.assembly, filename.output_dir, "left", list_format = True),
        right = lambda filename: salmon_get_samples(filename.assembly, filename.output_dir, "right", list_format = True)
    output:
        os.path.join("{output_dir}", "intermediate-files", "04-compare", "xx-individual-mapping",\
                     "salmon", "{assembly}_{assembler}_quant", "quant.sf")
    params:
        libtype = "A",
        indexname = os.path.join("{output_dir}", "intermediate-files", "04-compare", "xx-individual-mapping",\
                     "salmon", "{assembly}_{assembler}_index"),
        outdir = os.path.join("{output_dir}", "intermediate-files", "04-compare", "xx-individual-mapping",\
                     "salmon", "{assembly}_{assembler}_quant"),
        kval = 31
    log:
        err = os.path.join("{output_dir}", "logs", "xx-indiv-mapping", "{assembly}_{assembler}.err"),
        out = os.path.join("{output_dir}", "logs", "xx-indiv-mapping", "{assembly}_{assembler}.log")
    conda: os.path.join("salmon-env.yaml")
    shell:
        """
        salmon index -t {input.fastafile} -i {params.indexname} -k {params.kval} 2> {log.err} 1> {log.out}
        salmon quant -i {params.indexname} -l {params.libtype} -1 {input.left} -2 {input.right} --validateMappings -o {params.outdir} 2>> {log.err} 1>> {log.out}
        """

rule salmon_td:
    input: 
        fastafile = os.path.join("{output_dir}", "intermediate-files", "04-compare",
                                 "08-CAG-proteins", "{assembly}_CAG.fasta.transdecoder.pep"),
        left = lambda filename: salmon_get_samples(filename.assembly, filename.output_dir, "left", list_format = True),
        right = lambda filename: salmon_get_samples(filename.assembly, filename.output_dir, "right", list_format = True)
    output:
        os.path.join("{output_dir}", "intermediate-files", "04-compare", "08b-CAG-transdecoder-mapping",\
                     "salmon", "{assembly}_quant", "quant.sf")
    params:
        libtype = "A",
        indexname = os.path.join("{output_dir}", "intermediate-files", "04-compare", "08b-CAG-transdecoder-mapping",\
                     "salmon", "{assembly}_index"),
        outdir = os.path.join("{output_dir}", "intermediate-files", "04-compare", "08b-CAG-transdecoder-mapping",\
                     "salmon", "{assembly}_quant"),
        kval = 31
    log:
        err = os.path.join("{output_dir}", "logs", "08b-CAG-transdecoder-mapping", "{assembly}.err"),
        out = os.path.join("{output_dir}", "logs", "08b-CAG-transdecoder-mapping", "{assembly}.log")
    conda: os.path.join("salmon-env.yaml")
    shell:
        """
        salmon index -t {input.fastafile} -i {params.indexname} -k {params.kval} 2> {log.err} 1> {log.out} || true
        salmon quant -i {params.indexname} -l {params.libtype} -1 {input.left} -2 {input.right} --validateMappings -o {params.outdir} 2>> {log.err} 1>> {log.out} || true
        """
